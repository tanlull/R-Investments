data(mtcars)
#structure of a dataset
str(mtcars)
summary(mtcars)
head(mtcars) #default shows first 6 rows
tail(mtcars, n = 3)
nrow(mtcars)
ncol(mtcars)
dim(mtcars)
table(mtcars$cyl)
tail(mtcars,
3)
nrow(mtcars)
tail(mtcars, 3)
table(mtcars$cyl)
colSums(mtcars)
colMeans(mtcars)
sum(mtcars$wt)
sum(mtcars[,6])
mean(mtcars$mpg)
mean(mtcars[,1])
cor(mtcars$hp, mtcars$mpg)
colnames(mtcars)
rownames(mtcars)
plot(x = mtcars$hp, y = mtcars$mpg, type = "p", col = "red")
barplot(table(mtcars$cyl))
plot(mtcars)
data(airquality)
str(airquality)
summary(airquality)
print(head(airquality, n = 4))
print(tail(airquality, n = 3))
dim(airquality)
colnames(airquality)
rownames(airquality)
plot(airquality)
plot(x = airquality$Month, y = airquality$Wind, type = "p", col = "red")
cor( airquality$Month, y = airquality$Wind)
cor( airquality$Month, airquality$Wind)
plot(x = airquality$Month, y = airquality$Wind, type = "p", col = "red")
plot(airquality)
cor( airquality$Temp, airquality$Ozone)
cor( airquality$Month, airquality$Wind)
plot(x = airquality$Temp, y = airquality$Ozone, type = "p", col = "red")
cor(airquality$Temp, airquality$Ozone)
plot(x = airquality$Temp, y = airquality$Ozone, type = "p", col = "red")
plot(x = airquality$Month, y = airquality$Wind, type = "p", col = "red")
filter(mtcars, cyl == 6)
#install.packages("dplyr")
library(dplyr)
filter(mtcars, cyl == 6)
data(mtcars)
filter(mtcars, cyl == 6)
data(mtcars)
str(mtcars)
filter(mtcars, cyl == 6)
filter(mtcars, cyl = 6)
filter(mtcars, mpg = 21)
filter(mtcars, mpg == 21)
library("pkgconfig", lib.loc="~/R/win-library/3.4")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
#install.packages("dplyr")
library(dplyr)
install.packages("pkgconfig")
install.packages("pkgconfig")
#install.packages("dplyr")
library(dplyr)
filter(mtcars, cyl == 6)
arrange(mtcars, mpg)
arrange(mtcars, desc(mpg))
filter(mtcars, cyl == 6, mpg > 18)
#Subset dataframe by row
mtcars[1:3, ]              #Subset only rows 1 - 3 of mtcars dataset
#Subset dataframe by column
mtcars[, c(2,4)]             #Subset only columns 2 and 4 of mtcars dataset
#Subset dataframe by column
mtcars[, 2:4]             #Subset only columns 2 and 4 of mtcars dataset
#Subset dataframe by column
mtcars[, c(2,4)]             #Subset only columns 2 and 4 of mtcars dataset
Name <- c("Captain America", "Iron Man", "Black Widow", "Thor", "Scarlet Witch")
gender <- c("m", "m", "f", "m", "f")
cast <- c("Chris Evans", "Robert Downey Jr.", "Scarlett Johansson", "Chris Hemsworth", "Elizabeth Olsen")
Name <- c("Captain America", "Iron Man", "Black Widow", "Thor", "Scarlet Witch")
gender <- c("m", "m", "f", "m", "f")
cast <- c("Chris Evans", "Robert Downey Jr.", "Scarlett Johansson", "Chris Hemsworth", "Elizabeth Olsen")
Marvel.data <- data.frame(Name, gender, cast)
Marvel.data
Marvel.list <- list(Name, gender = gender, cast = cast)
Marvel.list
Marvel.list[[1]]
Marvel.list[[2]]
Marvel.list[[3]]
Marvel.list[[3]]
Marvel.list$cast
Marvel.data$gender
#subset data frame by row
Marvel.data[c(3,5), ]
subset(Marvel.data, gender == "f")
install.packages('quantmod')
install.packages('xts')
install.packages('zoo')
#load library
library(quantmod)
library(xts)
library(zoo)
#Load data
NAdata <- read.csv("data/PTTEP_NA.csv", stringsAsFactors = FALSE, sep = ",", header = TRUE)
head(NAdata)
NAdata[,1] <- as.Date(NAdata[,1]) #change character to date
NAdata.xts <- as.xts(NAdata[,2], order.by = NAdata$Index)
head(NAdata.xts)
#Check NAs in data
sum(is.na(NAdata.xts))
plot(NAdata.xts)
nrow(NAdata.xts)
#Remove NAs
omit <- na.omit(NAdata.xts)
nrow(omit)
plot(omit)
#Interpolate
approx <- na.approx(NAdata.xts)
nrow(approx)
plot(approx)
locf <- na.locf(NAdata.xts, fromLast = FALSE)
nrow(locf)
plot(locf)
nocb <- na.locf(NAdata.xts, fromLast = TRUE)
nrow(nocb)
plot(nocb)
#Load data
NAdata <- read.csv("data/PTTEP_NA.csv", stringsAsFactors = FALSE, sep = ",", header = TRUE)
head(NAdata)
dim(NAdata)
NAdata[,1] <- as.Date(NAdata[,1]) #change character to date
NAdata.xts <- as.xts(NAdata[,2], order.by = NAdata$Index)
head(NAdata.xts)
head(NAdata)
NAdata[,1] <- as.Date(NAdata[,1]) #change character to date
NAdata.xts <- as.xts(NAdata[,2], order.by = NAdata$Index)
head(NAdata.xts)
#head(NAdata)
#Interpolate
approx <- na.approx(NAdata.xts)
nrow(approx)
x <- "abcdef"
#substr(x, start, stop) - Extract substrings in a character vector
substr(x, start = 2, stop = 4)
x <- "abcdef"
#substr(x, start, stop) - Extract substrings in a character vector
substr(x, start = 2, stop = 4)
#substr(x, start, stop) <- "string" - Replace substrings in a character vector
substr(x, 2, 4) <- "123"
x
#grep(pattern, x) - search for pattern in x
y <- c("a", "b", "c", "d", "e")
grep("b", y)
#sub(pattern, replacement, x) - search for pattern in x and replace with replacement
sub("b", "z", y)
#paste(..., sep = "") - concatenate strings by using sep to separate them
text1 <- "abc"
text2 <- "def"
paste(text1, text2, sep = ",")
text3 <- c("a", "b", "c")
text4 <- c("d", "e", "f")
paste(text3, text4, sep = " ")
#Round number
round(3.456, digits = 2)
#Find length of vector
a <- c(1, 3, 5, 7, 9, 11)
length(a)
#Find length of vector b
b <- c(2, 3, 5, 7, 11, 13, 17)
#Find length of vector b
b <- c(2, 3, 5, 7, 11, 13, 17)
length(b)
#absolute value
abs(-5)
b <- c(-1, 2, 4, -6)
abs(b)
#square root
sqrt(3)
sqrt(abs(b))
ceiling(8.234)
ceiling(8.99)
floor(8.234)
floor(8.99)
a <- 1:10
a
#Find mean of vector
mean(a)
#Find standard deviation
sd(a)
median(a)
#Sum of all elements in vector
sum(a)
#Sum of some elements in vector
sum(a[1:5])
x <- 1:5
y <- c(10, 9 ,8, 1, 2)
max(x)
min(y)
pmin(x, y)
pmax(x, y)
max(x, y)
ktb <- c(19.7, 19.9, 20.0, 19.7, 19.8, 19.6, 19.5, 19.5, 19.4, 19.3)
ktb.mean <- mean(ktb)
head(NAdata.xts)
ktb.mean
ktb.sd <-<- sd(ktb)
ktb.sd
ktb.sd <- sd(ktb)
ktb.sd
ktb.min <- pmin(ktb)
ktb.min
ktb.min <- min(ktb)
ktb.min
ktb.max <-max(ktb)
ktb.max
#toupper(x) - change x to uppercase
text5 <- "abcdef"
toupper(text5)
#tolower(x) - change x to lower
text6 <- "ABCDEF"
tolower(text6)
#Calvin Klein changes it's logo from 'Calvin Klein' to 'CALVIN KLEIN'. Let's help CK.
logo    <- 'Calvin Klein'
newlogo <- toupper(logo)
#Calvin Klein changes it's logo from 'Calvin Klein' to 'CALVIN KLEIN'. Let's help CK.
logo    <- 'Calvin Klein'
newlogo <- toupper(logo)
#Calvin Klein changes it's logo from 'Calvin Klein' to 'CALVIN KLEIN'. Let's help CK.
logo    <- 'Calvin Klein'
newlogo <- toupper(logo)
newlogo
my_matrix <- matrix(1:6, nrow = 3, ncol = 2)
#my_matrix <- matrix(c(2,4,6,8,10,12), nrow = 3, ncol = 2, byrow = TRUE)
my_matrix
ptt <- c(49.25, 51.00, 49.50, 49.75, 49.25)
scc <- c(410, 418, 416, 426, 422)
rbind(ptt, scc)
cbind(ptt, scc)
m2 <- cbind(ptt, scc)
m2
m2transpose <- t(m2)
m2transpose
date <- 15
if(date == 1){
print("hello")
}
date <- 15
if(date == 1){
print("hello")
}
date <- 15
if(date == 1){
print("hello")
}
date <- 15
if(date == 1){
print("hello")
}
date <- 15
if(date == 1){
print("hello")
}
chance <- 0.4
if(chance > 0.5){
print("Bet Now!")
}else{
print("Keep the money.")
}
chance <- 0.4
if(chance > 0.5){
print("Bet Now!")
}else{
print("Keep the money.")
}
chance <- 0.6
if(chance > 0.8){
print("Shut up and take my money.")
}else if(chance > 0.5){
print("Wait and see.")
}else{
print("Keep the money.")
}
a <- c(1,3,5,7,9)
for(i in 1:length(a))
{
print(a[i] + 1)
}
a2 <- double()
for(i in 1:length(a))
{
a2[i] <- i + a[i]
}
a2
fruit <- c("apple", "banana", "orange")
fruitlength <- double()
for(i in fruit)
{
fruitlength[i] <- nchar(i)
}
fruitlength
stock_price <- 54.50
while(stock_price <= 56.0){
stock_price <- stock_price*runif(1, 0.98, 1.02)
print(stock_price)
}
print("Sell Now!")
#Skip iteration with next
for(i in 1:6)
{
if(i == 4)
{
next
}
print(i)
}
#Break iteration with break
for(i in 1:6)
{
if(i == 4)
{
break
}
print(i)
}
stock_price <- 54.50
while(stock_price <= 56.0){
randomUniform = runif(1, 0.98, 1.02)
stock_price <- stock_price*randomUniform
print(randomUniform,stock_price)
}
stock_price <- 54.50
while(stock_price <= 56.0){
randomUniform = runif(1, 0.98, 1.02)
stock_price <- stock_price*randomUniform
print(randomUniform+","+stock_price)
}
stock_price <- 54.50
while(stock_price <= 56.0){
randomUniform = runif(1, 0.98, 1.02)
stock_price <- stock_price*randomUniform
print(randomUniform)
print(stock_price)
}
print("Sell Now!")
speed    <- 20:60 #km/hr
time     <- 2 #hr
distance <- speed * time
distance
#plot(x = speed, y = distance)      #plot() means scatter plot
#or
plot(speed, distance)
plot(x = speed, y = distance,       #specify what's on x-axis and y-axis
main = "speed vs distance",    #chart title
xlab = "speed (km/hr)",        #x-axis label
ylab = "distance (km)",        #y-axis label
col = "blue",                  #plot color
pch = 16)                      #plot symbol
plot(x = speed, y = distance,       #specify what's on x-axis and y-axis
main = "speed vs distance",    #chart title
xlab = "speed (km/hr)",        #x-axis label
ylab = "distance (km)",        #y-axis label
col = "blue",                  #plot color
pch = 18)                      #plot symbol
par(mfrow = c(1,2)) #multiple plots in one screen
plot(speed, distance, type = "p", main = "Type 'p'")
plot(speed, distance, type = "l", main = "Type 'l'")
speed     <- 0:60
distance1 <- speed * time - 5
distance2 <- speed * time + 5
plot(speed, distance1, type = "l")
lines(speed, distance2, lty = 6, lwd = 3, col = "red")  #Try lty = 1 - 6
#Try
#points(speed, distance2, col = "red", pch = 8)
speed     <- 0:60
distance1 <- speed * time - 5
distance2 <- speed * time + 5
plot(speed, distance1, type = "l")
lines(speed, distance2, lty = 3, lwd = 3, col = "red")  #Try lty = 1 - 6
#Try
#points(speed, distance2, col = "red", pch = 8)
speed     <- 0:60
distance1 <- speed * time - 5
distance2 <- speed * time + 5
plot(speed, distance1, type = "l",col = "blue")
lines(speed, distance2, lty = 3, lwd = 3, col = "red")  #Try lty = 1 - 6
#Try
#points(speed, distance2, col = "red", pch = 8)
x1 <- c(1, 3, 5, 7, 9)
x2 <- c(2, 4, 6, 8, 10)
y1 <- x1 + x2
y2 <- x2 - x1
y3 <- (x1 + x2)/2
par(mfrow = c(2,3))             #Multiple graphs in one plot: Plots arranged in 2 rows 3 columns
plot(x1, y1, pch = 1, col = 1)  #Call plot() 6 times for 2 x 3 plots
plot(x1, y2, pch = 2, col = 2)
plot(x1, y3, pch = 3, col = 3)
plot(x2, y1, pch = 4, col = 4)
plot(x2, y2, pch = 5, col = 5)
plot(x2, y3, pch = 6, col = 6)
#install.packages('ggplot2')  #If this is the first time you use ggplot, need to install first.
library(ggplot2)
data(diamonds)
head(diamonds)
str(diamonds)    #check definition of each variable in slide deck
plot(x = diamonds$carat, y = diamonds$price)
plot(x = diamonds$carat, y = diamonds$price,
main = "Diamond Price by Carat",
xlab = "Carat",
ylab = "Price",
col = "blue",
pch = 5)
#install.packages('ggplot2')  #If this is the first time you use ggplot, need to install first.
library(ggplot2)
ggplot(diamonds, aes(x = carat)) +        #initialize plot with ggplot()
geom_histogram(bins = 30)                 #Add layer with geom_histogram()
#Try bins = 5
ggplot(diamonds, aes(x = carat)) +        #initialize plot with ggplot()
geom_histogram(bins =5)                 #Add layer with geom_histogram()
#Try bins = 5
ggplot(diamonds, aes(x = carat)) +        #initialize plot with ggplot()
geom_histogram(bins =30)                 #Add layer with geom_histogram()
#Try bins = 5
counts <- table(diamonds$clarity)    #Count how many samples in each clarity category
counts
ggplot(diamonds, aes(x = clarity)) +           #Initialize plot with ggplot()
geom_bar(fill = "lightblue", color = "black")  #Add layer with geom_bar()
ggplot(diamonds, aes(x = clarity)) +           #Initialize plot with ggplot()
geom_histogram(fill = "lightblue", color = "black")  #Add layer with geom_bar()
ggplot(diamonds, aes(x = clarity)) +           #Initialize plot with ggplot()
geom_bar(fill = "lightblue", color = "black")  #Add layer with geom_bar()
ggplot(diamonds, aes(x = clarity, y = price)) +   #Initialize plot with ggplot()
geom_boxplot(fill = "salmon", color = "red")      #Add layer with geom_bar()
p <- ggplot(diamonds, aes(x = carat, y = price)) +  #initialize plot with ggplot( )
geom_point(aes(color = clarity))               #Add layer of points with geom_point
p
#install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
#install.packages("plotly")
library(plotly)
library("plotly", lib.loc="~/R/win-library/3.4")
install.packages("plotly", repos = NULL)
library(plotly)
install.packages("plotly")
#install.packages("plotly")
library(plotly)
p <- ggplot(diamonds, aes(x = carat, y = price)) +  #initialize plot with ggplot( )
geom_point(aes(color = clarity))               #add layer of points with geom_point
ggplotly(p)                                         #make interactive with ggplotly
square.this <- function(x){
square <- x^2
return(square)
}
square.this(5)
say.hello <- function(){print('hello world')}
say.hello()
square.this <- function(x = 2){
square <- x^2
return(square)
}
square.this()
square.this(3)
sum.this <- function(x1, x2){
x1 + x2
}
sum.this(2, 3)
sum.this <- function(x1, x2){
x1 + x2
x1 - x2
}
sum.this(2, 3)
square.again <- function(x){
return(x^2)
#Other statements after explicit 'return'
return(x + 3)
}
square.again(5)
operation.results <- function(x1, x2){
add      <- x1 + x2
minus    <- x1 - x2
multiply <- x1 * x2
divide   <- x1 / x2
return(c(add, minus, multiply, divide))
}
operation.results(10, 5)
do.call("operation.results", args = list(x1 = 10, x2 = 5))
do.call("square.this", args = list(4))
do.call("square.this", args = list(c(4,3,2)))
data <- matrix(c(1:10, 21:30), nrow = 5, ncol = 4)
data
apply(data, MARGIN = 1, FUN = mean)
apply(data, 2, mean)
myList <- list(A = matrix(1:9, 3), B = 1:5, C = matrix(1:4, 2), D = 2)
myList
lapply(myList, sum)
sapply(myList, sum)
data(mtcars)
head(mtcars)
aggregate(mpg ~ cyl, mtcars, mean)
aggregate(mpg ~ cyl + gear, mtcars, mean)
